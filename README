-- README for Blackbox - an X11 Window manager
-- Copyright (c) 1997, 1998 by Brad Hughes, bhughes@arn.net
--
--  This program is free software; you can redistribute it and/or modify
--  it under the terms of the GNU General Public License as published by
--  the Free Software Foundation; either version 2 of the License, or
--  (at your option) any later version.
--
--  This program is distributed in the hope that it will be useful,
--  but WITHOUT ANY WARRANTY; without even the implied warranty of
--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--  GNU General Public License for more details.
--
--  You should have received a copy of the GNU General Public License
--  along with this program; if not, write to the Free Software
--  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
--
-- (See the included file COPYING / GPL-2.0)
-- 

This file covers operation and configuration of Blackbox.  Since it is still in
development, many things may or may not work properly (or at all).  This code 
was written from scratch (save for a bit of the 8bpp code, which was 
implemented from WindowMaker 0.11.0 source code (and has since been improved
upon and operates much faster than the way WindowMaker does, which is to alloc
colors for each image), and the dgradient code, courtesy of Frank R. Belew
<frb@umr.edu>).  I plan to make a list of testers and code contributors in
the future, which will appear here.

NOTE:  The 8bpp code is unfinished and mostly untested.  I do not make any 
guarantees or promises that you can run blackbox on an 8bpp X server.  I plan
to work on the 8bpp code more, but at the moment it is unfinished and should be
considered pre-alpha quality.

UPDATE: The 8bpp code has been considerably reworked and is working.  As a
note, blackbox does a fake match color allocation method (ala WindowMaker) when
it is run on an 8bpp X server.  What this means is that (for example) a slate
blue root window will most likely NOT be the same color as a slate blue title
bar window.  Please, no bug reports about improper coloring, as this is the
method I have decided to use because of the way I render and use internal 
images.


Credits:
-----------
Author:
	Brad Hughes <bhughes@arn.net>

Contributors:
	Jeffrey Sean Connell <ankh@canuck.gen.nz>
	  - debugger class code
	Frank Belew <frb@umr.edu>
	  - dgradient code
	Scott Garner <mrfab@arn.net>
	  - suggestions and bug reports/beta testing
        David Doan <ddoan@usa.net>
	 - testing of 8bpp code
	Mark Seward <illuzion@paradise.net.nz>
	 - beta testing, bug reports and 32bpp testing
	Keith Bolland <prime@strip.net.nz>
	 - beta testing, bug reports and suggestions


Compilation and Installation:
--------------------------------
Blackbox uses an Imakefile to better configure and allow for various system 
types.  Compiler flags, libraries and paths are automatically set in the 
various imake rules and templates files.

To fully compile and install blackbox, issue the following commands:
	xmkmf -a
	make
	make install (as root, for permissions)

Each user should edit their appropriate .xinitrc or .xsession files to use the 
newly installed blackbox executable file.


Operation:
-------------
Operation of blackbox is similar to many other window managers.  An
explanation of functions and their default behaviour (read, some behaviours
are modifiable/configurable) is included below.

Windows are stacked in a specific order.
The toolbox set on the left hand side of the root window is always on the
bottom of the stack list.  Client windows are stacked above the toolbox, thus
it is possible to totally obscure the toolbox from site with large/numerous
clients.  The session (root) menu, workspace manager menu (the top left button
reveals this menu) and the workspace menus (window lists) are stacked above
the client windows, and thus will always be visible when mapped (visible).

Client window stacking order is modifiable by clicking on the window titlebar
or the window handle bar. Mouse button 1 (by default, the left mouse button
on a right handed mouse, which is modified in the X configuration files, not
by blackbox) raises the window to the top of the stack (under any transient
windows, such as help/about/question dialog boxes).  Mouse button 2 (by
default the middle mouse button) lowers the window (and any transient
windows) to the bottom of the window stack.

Client windows are movable by holding mouse button 1 on the titlebar and
dragging the window to the desired location.  This is an opaque move (the
window contents are visible during the move) and as of yet, the only option
for moving windows.  A wire frame move may be implemented, provided requests
for it are made.  Releasing the mouse button ends the window move.

Since blackbox is an ICCCM compliant window manager, the window decorations are
controlled by messages and defaults set by the client.  If a client does not
accept a certain ICCCM protocol request, then a close button (the "X" button)
will not be created.  Likewise, if a client sets its maximum and minimum size
to the same settings, a maximize button (the box button) will not be created,
nor will a window handle, since the window cannot be resized.  The ICCCM
specifications allow for an Urgent window to be created, but at the moment
blackbox ignores such windows (as the ICCCM allows).  If such windows are
supported in future releases, the iconify button (the bar button) will not be
created.  In this release, the iconify button is created for all windows.

Clients that report a user or program specified location are accomodated, and
placed in the appropriate location.  Otherwise, client windows are cascaded
when mapped (which cycles back when necessary).  If a client wishes to resize
itself or reposition itself, its request is honored.

Support is also available for older (read: pre ICCCM) clients that behave
differently than described in the ICCCM specification included with the
X11R6.3 release of the X Window System.  Most notable of such clients is xv,
which is the primary graphics viewer/editor for many people (read: Linux
users).

Client windows that allow resizing will have a handle added to the decorations.
To interactively resize a window, the button at the bottom of the handle should
be pressed with mouse button 1 and drug to the desired location.  If the client
has reported a size stepping/increment, this increment is taken into account
when the resizing begins.  Resizing is controlled by a wire frame, which is
removed when the mouse button is released (at which point the client is
resized).

The maximize button maximizes the client window in the available space on the
root window (i.e. minus the width of the toolbox).  Again, clients with set
size increments are incremented and then centered in the desktop (so that means
a maximized xterm may not take up the full screen).

Client windows have a window menu accessable by clicking mouse button 3 (by
default, the right button on a right handed mouse) on the window titlebar.
This window menu includes a submenu for sending the window to a different
workspace, iconify, maximize/unmaximize (if the client can be resized), close,
raise, and lower functions.  The "Send To ..." submenu displays a list of
available workspaces, which will send the window to the desired workspace
if one is selected from the menu.  The window menu is retractable by pressing
mouse button 3 on the window titlebar a second time.

About menus in blackbox.  Other graphical interfaces allow menus to be
traversed by holding mouse button 1 and moving the pointer.  With blackbox,
this is not the case.  Each menu items must be selected by the user.  Plans to
change this have not been made, nor considered, as this method could prove to
eliminate clicking or releasing the wrong menu item.

The session (root) menu is mapped by pressing mouse button 3 on the root
window.  The menu title is centered around the pointer's current position, and
thus it is possible to obscure part of the menu beyond the root window
boundaries.  It is possible to move the root menu, in the same manner as moving
a client window.  If an item is selected from the root menu or any of its
submenus, the window will unmap itself UNLESS the user has moved the window,
in which case it will remain on the root window until the user unmaps it by
clicking mouse button 3 on its title.  Submenus are shown when clicked with
either mouse button 1 or 3, but only hidden when mouse button 3 is pressed on
the item.  If one submenu is visible when another is selected, the first is
hidden before the second is shown.

The workspace manager menu operates differently from the root menu in several
respects.  It does not have a title, and thus is not movable.  Pressing the
Workspace button at the top of the toolbox maps the workspace manager menu.
The "New Workspace" menu item creates a new workspace, which is like a
virtual X desktop on which more windows may be placed.  The "Delete last" menu
item iconifies ALL windows on the last workspace, and removes the last
workspace from blackbox's memory.  The number of workspaces is dynamic, but at
least one must stay "alive".  Because of this, the user cannot delete
Workspace 0.  Pressing one of the available workspaces in the menu with mouse
button 1 changes to that workspace (i.e. all windows on the current workspace
are hidden, and the windows on the selected workspace are shown) A workspace
menu which contains a list of windows on any given workspace is available by
pressing mouse button 3 on the appropriate workspace menu item.  If the user
selects a window from the window list, blackbox will change workspaces to the
appropriate workspace (if the window selected is not on the current workspace)
and the window is raised (and moved to a visible location if it is not visible)
and awarded keyboard input focus.

Keyboard input focus is also awarded to those clients who accept it (again,
the client specifies if it can take focus through ICCCM protocol requests).
Since X exists to "provide mechanism, not policy," blackbox does not honor any
hotkey or shortcut key combinations to its functions.  However,  the user may
circulate through available workspaces by holding a Mod1 key (see xmodmap(1))
and pressing either mouse button 1 or 3 (button 1 ascends the workspace list,
while button 3 ascends it, or button 1 would change from Workspace 2 to
Workspace 1, and button 3 would change from Workspace 1 to Workspace 2 for
example).

Icons are placed on the bottom half of the toolbox.  These icons are present
in all workspaces,  thus it is possible to move a window to another workspace
by iconifying it and then deiconifying it on a new workspace (but the Send
To ... window menu function is much easier).  Blackbox reads the icon label
from the ICCCM hints the client window sets.  If there is no icon label
available, "Unnamed" is used (same for window titles).  If the icon label is
longer than the icon, the label is clipped.  If the user places the pointer
over an icon, the full icon label is displayed in the window title font,
drawing onto the root window (and possibly others) if necessary to show the
full label.  Pressing the icon with mouse button 1 will deiconify the window
on the current workspace (dissociating it from its original workspace if
necessary).

Blackbox operates the same way any other window manager operates.  It monitors
events sent by the X server and deals with them accordingly (like mapping a
client window with or without decorations, for example).  One event it also
monitors is a PropertyNotify event on the root window.  If the RESOURCE_MANAGER
property should change, blackbox rereads its configuration and applies it to
current and future windows, menus, icons, etc.  Blackbox can also be forced to
reread its configuration via the menu (see the menu section below).


Configuration:
-----------------
Configuration of blackbox is not handled by rc files in a users home 
directory, rather X resources are used to control the look of the window 
manager.  These resources can be set by the default configuration (which is 
installed with the program) or by a user (by using xrdb or some other 
resource loading mechanism which sets the RESOURCE_MANAGER property on the root
window, from which blackbox gets its defaults).  The default resources are
read when there are no user defaults set in the RESOURCE_MANAGER string
property on the root window.  If the default resource files cannot be found,
then blackbox uses a hard coded default (using flat textures).

The X resources that blackbox recognizes:


Name:					Class:
--------				---------
blackbox.session.toolboxTexture		Blackbox.Session.ToolboxTexture
blackbox.session.windowTexture		Blackbox.Session.WindowTexture
blackbox.window.buttonTexture		Blackbox.Window.ButtonTexture
blackbox.menu.menuTexture		Blackbox.Menu.MenuTexture
blackbox.menu.menuItemPressedTexture	Blackbox.Menu.MenuItemPressedTexture
blackbox.menu.menuItemTexture		Blackbox.Menu.MenuItemTexture

Values Accepted:
    Solid / SolidRaised			(solid color w/ raised bevel)
    SolidSunken				(solid color w/ sunken bevel)
    SolidFlat				(solid color w/ no bevel)
    DGradient / DGradientRaised		(diagonal gradient w/ raised bevel)
    DGradientSunken			(diagonal gradient w/ sunken bevel)
    DGradientFlat			(diagonal gradient w/ no bevel)
    HGradient / HGradientRaised		(horizontal gradient w/ raised bevel)
    HGradientSunken			(horizontal gradient w/ sunken bevel)
    HGradientFlat			(horizontal gradient w/ no bevel)
    VGradient / VGradientRaised		(vertical gradient w/ raised bevel)
    VGradientSunken			(vertical gradient w/ sunken bevel)
    VGradientFlat			(vertical gradient w/ no bevel)

	The various textures give a better appearance to blackbox.  The toolbox
	texture controls the toolbox on the left side of the screen


Name:					Class:
--------				---------
blackbox.session.frameColor		Blackbox.Session.FrameColor
blackbox.session.toolboxColor		Blackbox.Session.ToolboxColor
blackbox.session.toolboxToColor		Blackbox.Session.ToolboxToColor
blackbox.window.focusColor		Blackbox.Window.FocusColor
blackbox.window.focusToColor		Blackbox.Window.FocusToColor
blackbox.window.unfocusColor		Blackbox.Window.UnfocusColor
blackbox.window.unfocusToColor		Blackbox.Window.UnfocusToColor
blackbox.window.buttonColor		Blackbox.Window.ButtonColor
blackbox.window.buttonToColor		Blackbox.Window.ButtonToColor
blackbox.menu.menuColor			Blackbox.Menu.MenuColor
blackbox.menu.menuToColor		Blackbox.Menu.MenuToColor
blackbox.menu.menuItemColor		Blackbox.Menu.MenuItemColor
blackbox.menu.menuItemToColor		Blackbox.Menu.MenuItemToColor
blackbox.session.focusTextColor		Blackbox.Session.FocusTextColor
blackbox.session.unfocusTextColor	Blackbox.Session.UnfocusTextColor
blackbox.session.menuTextColor		Blackbox.Session.MenuTextColor
blackbox.session.menuItemTextColor	Blackbox.Session.MenuItemTextColor
blackbox.session.menuPressedTextColor	Blackbox.Session.MenuPressedTextColor
blackbox.session.iconTextColor		Blackbox.Session.IconTextColor;

Accepted Values:
	Blackbox has been updated so that it now takes any X color
	name in defining it's colors.

	These color specs control the appearance of blackbox.


Name:					Class:
--------				---------
blackbox.session.menuFile		Blackbox.Session.MenuFile

Accepted Value:
	a character string.  Be warned... if the file cannot be opened 
	blackbox's root menu will revert to xterm, Restart and Exit.


Name:					Class:
--------				---------
blackbox.session.workspaces		Blackbox.Session.Workspaces

Accepted Value:
	an integer.  This resource controls how many workspaces are created 
	when blackbox starts a new session (read, assumes control of an X 
	display).


Name:					Class:
--------				---------
blackbox.session.orientation		Blackbox.Session.Orientation

Accepted Values:
	either "LeftHanded" or "RightHanded" (case insensitive).  This resource
	changes the appearance and orientation of some window decorations
	to allow for easier and more natural access for left handed and/or
	right handed users.  (Note:  resizing from left handed orientation is
	a bit awkward.  fix is forthcoming)


Name:					Class:
--------				---------
blackbox.session.titleFont		Blackbox.Session.TitleFont
blackbox.session.menuFont		Blackbox.Session.MenuFont
blackbox.session.iconFont		Blackbox.Session.IconFont

Accepted values:
	any X font string.  if no resource is specified or if the font
	specified does not exist, a default font is loaded.
	the title font is the font used on window title bars, menu titles,
	and the workspace button on the toolbar.  the menu font is used on
	menu items, and the icon font is for icon labels


As an idea of how to configure blackbox, here is a snippet of my .Xdefaults 
file:

--
! Blackbox window manager resource defaults
! (c) 1997, 1998 Brad Hughes

blackbox*toolboxTexture:          dgradientsunken
blackbox*windowTexture:           hgradient
blackbox*buttonTexture:           dgradient
blackbox*menuTexture:             hgradientflat
blackbox*menuItemTexture:         hgradientsunken
blackbox*menuItemPressedTexture:  vgradientflat

blackbox*frameColor:              rgb:30/30/60
blackbox*toolboxColor:            rgb:30/30/60
blackbox*toolboxToColor:          rgb:18/18/30
blackbox*focusColor:              rgb:60/60/c0
blackbox*focusToColor:            rgb:20/20/40
blackbox*unfocusColor:            rgb:20/20/40
blackbox*unfocusToColor:          rgb:10/10/20
blackbox*buttonColor:             rgb:60/60/c0
blackbox*buttonToColor:           rgb:30/30/60
blackbox*menuColor:               rgb:60/60/c0
blackbox*menuToColor:             rgb:30/30/60
blackbox*menuItemColor:           rgb:30/30/60
blackbox*menuItemToColor:         rgb:50/50/a0
blackbox*focusTextColor:          grey
blackbox*unfocusTextColor:        rgb:30/30/60
blackbox*menuTextColor:           grey
blackbox*menuItemTextColor:       darkgrey
blackbox*menuPressedTextColor:    slategrey
blackbox*iconTextColor:           grey

blackbox*workspaces:              4
blackbox*menuFile:                /home/bhughes/.blackboxmenu
blackbox*orientation:             righthanded

blackbox*titleFont:     -bitstream-charter-medium-i-*-*-*-120-*-*-*-*-*-*
blackbox*menuFont:      -bitstream-charter-medium-r-*-*-*-120-*-*-*-*-*-*
blackbox*iconFont:      -bitstream-charter-medium-r-*-*-*-100-*-*-*-*-*-*
--


The Menu File:
-----------------
The menu file is still in it's infancy, so only a single level of the root 
menu is able to be created.  The format is shown below:

[begin] (menu label)			<- must be the first line in the file
  "item label" (command -switches args)
  ...
  [begin] (menu label)			<- submenu
    "item label" (command -switches args)
    ...
  [end]					<- end of submenu
  "item label" (Restart)		<- restarts blackbox
  [restart] (item label) {command}	<- restarts a different window manager
  "item label" (Reconfigure)		<- rereads configuration and applies it
  "item label" (Exit)			<- exits blackbox
[end]


Again for an idea of how to configure the menu, here is my .blackboxmenu file 
(set by the resource in my .Xdefaults file):

--
[begin] (Precursor)
  "xterm" (xterm -ls)
  "ircII undernet" (xterm -name irc -e irc)
  "ircII epic" (xterm -name irc -e irc nyz irc.miranda.org:6667)
  "xemacs" (xemacs)
  "Ion CD" (ion/cd-0.6.4/ioncd)
  [begin] (Graphics)
    "xv 3.10a" (xv -bg rgb:c0/c0/c0 -fg black -hi rgb:e0/e0/e0 -lo rgb:a0/a0/a0)
    "Image Magick" (display)
  [end]
  "Communicator 4.04" (netscape)
  [begin] (PPP link)
    "ppp up" (/usr/sbin/pppd)
    "ppp down" (killall pppd)
  [end]
  [begin] (Restart)
    "Reconfigure" (Reconfigure)
    "Blackbox" (Restart)
    [restart] (WindowMaker) {wmaker}
  [end]
  "Exit" (Exit)
[end]
--


Questions comments and flames welcome.  bhughes@arn.net
Enjoy blackbox, I have enjoyed coding it.
